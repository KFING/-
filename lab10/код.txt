task 1

CREATE PROCEDURE GET_CUST
@NUM CHAR(10),
@COMPANY CHAR(20) OUTPUT,
@FIO CHAR(20) OUTPUT,
@CITY CHAR(10) OUTPUT

AS
BEGIN

SELECT @COMPANY = COMPANY FROM CUSTOMERS WHERE @NUM = CUST_NUM;
SELECT @FIO = FIO FROM SALESPERS WHERE EMPL_NYM IN (SELECT CUST_REP FROM CUSTOMERS WHERE @NUM = CUST_NUM);
SELECT @CITY = CITY FROM OFFICES WHERE CUST_NUM = @NUM;

END;

********************************

task 2

CREATE PROCEDURE CHK_TOT
@NUM CHAR(10)
AS 
DECLARE @AMOUNT MONEY
BEGIN
	SELECT @AMOUNT = (SELECT AMOUNT FROM CUSTOMERS WHERE CUST_NUM = @NUM);

	IF @AMOUNT > 30000 UPDATE OFFICES SET STATUS = 'большой объем заказов' WHERE CUST_NUM = @NUM
	ELSE UPDATE OFFICES SET STATUS = 'малый объем заказов' WHERE CUST_NUM = @NUM

END

***********************************

task 3

CREATE PROCEDURE NEW_RECORD_OFFICE
@NUM CHAR(10),
@TARGET FLOAT,
@CITY CHAR(10),
@STATUS CHAR(30)
AS
DECLARE @MESSAGE CHAR(30)
DECLARE @AMOUNT MONEY
DECLARE @EMPL_NUM CHAR(10)
BEGIN
	IF @NUM IN(SELECT CUST_NUM FROM CUSTOMERS) 
	BEGIN
		INSERT INTO OFFICES (TARGET,CITY,CUST_NUM,STATUS) VALUES(@TARGET,@CITY,@NUM,@STATUS)
		SELECT @EMPL_NUM = (SELECT CUST_REP FROM CUSTOMERS WHERE CUST_NUM = @NUM)
		EXEC @AMOUNT = CHK_TOT @NUM;
		IF @AMOUNT < 20000 
		BEGIN
			PRINT 'Увеличение поля QUOTA у сотрудника ' + @EMPL_NUM
			SELECT * FROM SALESPERS WHERE EMPL_NYM = @EMPL_NUM
			UPDATE SALESPERS SET QUOTA += @TARGET WHERE EMPL_NYM = @EMPL_NUM
			SELECT * FROM SALESPERS WHERE EMPL_NYM = @EMPL_NUM
		END
		ELSE IF @AMOUNT = 20000 
		BEGIN
			PRINT 'Увеличение поля QUOTA у сотрудника ' + @EMPL_NUM
			SELECT * FROM SALESPERS WHERE EMPL_NYM = @EMPL_NUM
			UPDATE SALESPERS SET QUOTA += 20000 WHERE EMPL_NYM = @EMPL_NUM
			SELECT * FROM SALESPERS WHERE EMPL_NYM = @EMPL_NUM
		END
		ELSE 
		BEGIN
		ROLLBACK TRANSACTION
		END
		
	END
	ELSE PRINT 'Нет клиента с номером ' + @NUM;

END

***********************************

task 4

CREATE TRIGGER trigEMPL_NYM
ON SALESPERS AFTER UPDATE
AS IF UPDATE(EMPL_NYM)
DECLARE @NEW CHAR(10)
DECLARE @OLD CHAR(10)
BEGIN

SELECT @NEW = (SELECT EMPL_NYM FROM inserted);
SELECT @OLD = (SELECT EMPL_NYM  FROM deleted);

UPDATE CUSTOMERS SET CUST_REP = @NEW WHERE CUST_REP = @OLD;

END

*****************************************

task 5

CREATE TRIGGER dateTrigger
ON CUSTOMERS FOR INSERT,UPDATE
AS
DECLARE @dateCust DATE;
IF EXISTS (SELECT 0 FROM deleted)
BEGIN
	IF EXISTS (SELECT 0 FROM inserted)
	BEGIN
		
		SELECT @dateCust = (SELECT DATA_ORDER FROM inserted);
		IF DATEPART(DAY,@dateCust) > 15
		BEGIN
		PRINT 'Заказ сделан позже 15 числа (' + convert(varchar, @dateCust, 0) + ')';
		ROLLBACK TRANSACTION
		END
	END
END
ELSE
BEGIN
		SELECT @dateCust = (SELECT DATA_ORDER FROM inserted);
		IF DATEPART(DAY,@dateCust) > 15
		BEGIN
		PRINT 'Заказ сделан позже 15 числа (' + convert(varchar, @dateCust, 0) + ')';
		ROLLBACK TRANSACTION
		END
END


